#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.0.1.{build}

branches:
  only:
    - master

environment:
  matrix:
    # Must add CLang, or GCC
    # i.e. - COMPILER_FAMILY: GNU
    - COMPILER_FAMILY: MSVC
      DEPLOY_TO_NUGET: 0
      DEPLOY_BUILD: 0
      PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.8"
      PYTHON_ARCH: "64"


skip_commits:
  # Add [av skip] to commit messages to skip AppVeyor building
  # Add [ci skip] to skip Travis and AppVeyor building
  message: /\[av skip\]/ 

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Operating system (build VM template)
os: Visual Studio 2015 CTP

init:
  - git config --global core.autocrlf input

clone_folder: c:\projects\nupic
clone_depth: 50
shallow_clone: true

#---------------------------------#
#       build configuration       #
#---------------------------------#

nuget:
  account_feed: true
  project_feed: true
  disable_publish_on_pr: true     # disable publishing of .nupkg artifacts to
                                  # account/project feeds for pull request builds

configuration: Release

install:
  - set REPO_DIR=c:\projects\nupic
  - set NUPIC_DEPLOYMENT_BUILD=1

  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - "powershell ./appveyor/install.ps1"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  # - "%CMD_IN_ENV% pip install -r dev-requirements.txt"

  # - mkdir %REPO_DIR%\build\
  # - mkdir %REPO_DIR%\build\release
  # - mkdir %REPO_DIR%\build\scripts
  # - cd %REPO_DIR%\build\scripts

  - cd %REPO_DIR
  - python setup.py install


