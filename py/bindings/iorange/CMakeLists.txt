set(NUPIC_VERSION_FLAGS "-DNUPIC2")

include("${CMAKE_SOURCE_DIR}/CMakeInclude.txt")

##########################################################################
##
## Begin generation of tools bindings for other programming languages
##
##########################################################################
# The typical build process for a set of bindings is as follows:
# 1) Run swig over a set of "interface" files with the target language
#    set appropriately. swig generates a file full of C wrapper functions
#    (e.g. swig_pyntha_tools.cpp for Python) plus a target language
#    file that loads the bindings and inserts proxy classes
#    (e.g. tools.py for Python).
# 2) Run the C++ compiler and linker over the C wrappers to generate a
#    library of wrappers. This library of wrappers depends on the
#    real C++ library it is wrapping (e.g. libtools.a).
#    The final C wrapper library must be linked dynamically, and must include
#    the real C++ library as well. The name of this dynamic library
#    and the flags used to link it depend heavily on the target language
#    and may differ by OS, CPU, etc. (e.g. _tools.so for Python).
# 3) Install the wrapper library (_tools.so) and the target language file
#    (tools.py) in an appropriate place in the install tree.
#    In Python, this is ROOT/lib/pythonM.m/site-packages/
#    However, to keep from polluting the global Python module namespace
#    with common names like 'tools', all numenta modules will
#    go into a package called nupic, so the final paths will be:
#      ROOT/lib/pythonM.m/site-packages/nupic/_tools.so
#      ROOT/lib/pythonM.m/site-packages/nupic/tools.py
#

#pydocs:
#	${CMAKE_SOURCE_DIR}/build_system/misc/doxygen2pydoc/update_pydocs.py {CMAKE_SOURCE_DIR}/nta/tools \
#${CMAKE_SOURCE_DIR}/nta/tools/list_docs_iorange.txt ${CMAKE_SOURCE_DIR}/pydocs.i

##########################################################################
# Python section
##########################################################################

if($(NTA_PYTHON_SUPPORT))

  # This script is generated by swig.
  # It's name is not specified explicitly to swig, but is implicit in
  # the name of the module that is being generated.
  # This module can be specified on swig's command line
  # (-module tools), or in the interface file (tools.i).
  # Here, we choose to specify it in the interface file, as it allows us
  # to add additional info that can't be specified on the command line:
  # the package that the module goes into (nupic),
  # and the module docstring.

  # The C pre-processor flags to use when compiling the sources that
  # generate the binding library.
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNUPIC2")

  # Our C++ flags to use when compiling the sources that
  # generate the binding library. These could be moved
  # into the CPPFLAGS, ideally without problems?
  set(CMAKE_CXX_FLAGS "${NTA_CXXFLAGS_PYTHON_BINDINGS} -DSWIG_TYPE_TABLE=_nupic_iorange -DNUPIC2")

  # This is the dynamic python module that will be generated.
  # Python modules are always named _modulename.so. Unfortunately,
  # there is nothing Python-obvious about this name, so it may
  # conflict with libraries we generate for other target languages
  # in the future.
  # (The list of sources also includes the swig interface files, even 
  # though they're not used to compile, just to get the dependencies right.)
  swig_add_module(_iorange python
    iorange_py.i
    iorange_py.cpp
  )

  # The set of linker flags to use when linking the _modulename.so
  # These are specific to Python, and architecture-specific as well.
  set(CMAKE_MODULE_LINKER_FLAGS "${NTA_PYMODULEFLAGS}")

  # Link in the "real" C++ library that the bindings are wrapping.
  swig_link_libraries(_iorange
    ${CMAKE_INSTALL_PREFIX}/lang/py/support/libsupport
    ${CMAKE_INSTALL_PREFIX}/nta/os/libos
    ${CMAKE_INSTALL_PREFIX}/nta/ntypes/libntypes
    ${CMAKE_INSTALL_PREFIX}/nta/utils/libutils
    ${CMAKE_INSTALL_PREFIX}/nta/types/libtypes
    ${NTA_STANDARD_LIBS}
  )

endif()
