########################################################################### 
# Python logging configuration file. See documentation of the python logging
#  module for a description of the format of this file.
# 
# This configuration file (named "nupic-logging.conf") is searched for in the
#  following directories (in order) by the nupic.support.initLogging() method,
#  which must be called at startup, before any logging is performed: 
#   1.) $NTA_CONF_PATH environment variable
#   2.) <NUPIC>/config, where '<NUPIC>' is the NuPic source directory (for example 
#       ~/nupic)
#   3.) in pkg_resources "nupic.support" location.
#
# This configuration file can use the environment variable NTA_LOG_DIR to
#  decide where to place generated log files. If not defined already in the user's
#  environment variables, it will be set to <NUPIC>/logs by default before this
#  configuration file is read in.
#
# nupic.support.initLogging() processes the contents of this file, replaces
#  the following keys (e.g., $$<key>$$), and passes the result
#  to the python logging config parser:
#
#     CONSOLE_LOG_LEVEL
#       log level filter for default console handlers; may be one of:
#         'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'
#     FILE_HANDLER_LOG_FILENAME
#       Absolute file path for the file handler's log file for the current
#       process (this should include a timestamp in addition to PID since PIDs
#       get reused over time)
#     ROOT_LOGGER_HANDLERS
#       Logger handlers used by the root handler
#         e.g., fileHandler,stderrConsoleHandler
#                   or
#               fileHandler
#     PERSISTENT_LOG_HANDLER
#       Name of persistent log handler to use
#        (e.g., fileHandler or syslogHandler)
#     SYSLOG_HANDLER_ADDRESS
#       The address to use for syslogHandler
#        (e.g., "/var/run/syslog" on MacOS X or "/dev/log" on Linux)
#
# To use logging. simply open up a logger, giving it a fully qualified 'dot'
#   class name, and then make calls to either the info, debug, warning, error,
#   or critical method of the logger. For example:
#
# self.logging = logging.getLogger('com.numenta.nupic.cluster.clientjobmanager.'
#                    + self.__class__.__name__)
# self.logging.info('a message at the info level')
# self.logging.debug('a message at the debug level')
#
# If a logger for a specific class name is not defined in this configuration, 
# the logging framework will search up the 'dot' logger name hierarchy until 
# it finds a match, or until it reaches the root logger.  
########################################################################### 

# The list of loggers. For each item in 'keys', there should be another
#  section below called [logger_<key>]
[loggers]
keys=root

# The list of handlers. For each item in 'keys', there should be another
#  section below called [handler_<key>]
[handlers]
keys=stdoutConsoleHandler,stderrConsoleHandler,fileHandler

# The list of formatters. For each item in 'keys', there should be another
#  section below called [formatter_<key>]
[formatters]
keys=simpleFormatter


###########################################################################
# The logger sections. 
#  'level' can be: DEBUG, INFO, WARNING, ERROR, CRITICAL
#  'handlers' is a comma separated list of handler names
#  'qualname' is the name given to the logger by the code instantiating it
#  'propogate' if 1, propogate up to parent loggers as well
###########################################################################
[logger_root]
level=INFO
handlers=$$ROOT_LOGGER_HANDLERS$$

# This is an example of custom logger for a specific context
# NOTE: see nupic.support.initLogging() optional args before resorting to a
#  custom logger.
#[logger_com.numenta.nupic.tools.prepare_conf]
#level=INFO
#handlers=$$PERSISTENT_LOG_HANDLER$$
#qualname=com.numenta.nupic.tools.prepare_conf
#propagate=0


############################################################################
# The Handlers
# Handlers have access to the NTA_LOG_DIR environment variable to define the
#  locations of the log files. 
############################################################################
[handler_stdoutConsoleHandler]
class=StreamHandler
level=$$CONSOLE_LOG_LEVEL$$
formatter=simpleFormatter
args=(sys.stdout,)

[handler_stderrConsoleHandler]
class=StreamHandler
level=$$CONSOLE_LOG_LEVEL$$
formatter=simpleFormatter
args=(sys.stderr,)


[handler_fileHandler]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=simpleFormatter
args=($$FILE_HANDLER_LOG_FILENAME$$,  # filename
      'a',                            # mode 
      10000000,                       # maxBytes
      1000,                           # backupCount
     )
        
        
[handler_syslogHandler]
# NOTE: jython (2.5.2) fails when initializing SysLogHandler with:
#  AttributeError: 'module' object has no attribute 'AF_UNIX'
class=handlers.SysLogHandler
level=DEBUG
formatter=simpleFormatter
# address:
#  Darwin: "/var/run/syslog"
#  Linux: "/dev/log"
args=($$SYSLOG_HANDLER_ADDRESS$$, handlers.SysLogHandler.LOG_LOCAL2)


###########################################################################
# The Formatters
###########################################################################
[formatter_simpleFormatter]
format=%(asctime)s - %(name)s(%(process)d) - %(levelname)s - %(message)s
datefmt=

