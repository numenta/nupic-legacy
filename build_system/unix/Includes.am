# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2013, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------
#
#
#
# Location of all third-party packages in the source tree
#
externaldir = $(top_srcdir)/external/@nta_platform@

#
# Global C preprocessor flags
# Allows us to find includes for external libraries and enables
# #include <nta/common/...>
#
NTA_INCLUDEFLAGS = -I$(top_srcdir) -I$(top_srcdir)/external/common/include -I$(externaldir)/include

#
# All executables and plugins are linked with these flags
#
NTA_LINKFLAGS =  -L$(externaldir)/lib @nta_platform_ldflags@

#
# Compiler flags
#

# NTA_INTERNAL tells us that the code is being built under the build system

NTA_CXXFLAGS_BASE = $(NTA_INCLUDEFLAGS) -fvisibility=hidden -DNTA_INTERNAL

#
# Optimization can be set at configure time
#
if NTA_OPTIMIZATION_ENABLED
  # -ftree-vectorize conflicts with -no-tree-aliasing on leopard, so removed
  NTA_CXX_OPTFLAGS = -O3 -falign-loops=16 -pipe
  NTA_PYTHON_BINDINGS_OPTFLAGS = -O1
else
  NTA_CXX_OPTFLAGS = -O0 -fno-inline
  NTA_PYTHON_BINDINGS_OPTFLAGS = -O0 -fno-inline
endif

#
# Compiling with debugging symbols can be set at configure time
#
if NTA_DEBUGSYMBOLS_ENABLED
  NTA_CXXFLAGS_BASE += @nta_platform_debug_flag@
endif

#
# NTA_ASSERTIONS_ON can be set at configure time
#
if NTA_ASSERTIONS_ENABLED
  NTA_CXXFLAGS_BASE += -DNTA_ASSERTIONS_ON
else
  NTA_CXXFLAGS_BASE += -DNDEBUG
endif

#
# Gprof profiling may be turned on or off.
#
if NTA_PROFILING_ENABLED
  NTA_CXXFLAGS_BASE += -pg
  NTA_LINKFLAGS += -pg
endif


################################################################
NTA_CXXFLAGS_BASE += @nta_platform_cxxflags@
NTA_CXXFLAGS_BASE += -DNTA_PLATFORM_@nta_platform@

NTA_CXXFLAGS_BASE += \
       -Wall -Wreturn-type -Wunused-variable -Wno-deprecated \
       -DBOOST_NO_WREGEX -DNTA_INSTRUMENT_ON

################################################################

################################################################
# External libraries needed by libfoundation
################################################################
NTA_STANDARD_LIBS = \
$(externaldir)/lib/libyaml.a \
$(externaldir)/lib/libaprutil-1.a \
$(externaldir)/lib/libapr-1.a \
$(externaldir)/lib/libz.a \
@nta_platform_libs@

#$(externaldir)/lib/libcrypto.a \
#$(externaldir)/lib/libpng.a

################################################################
# dont use standard automake options
AM_CXXFLAGS =
AM_CCASFLAGS =
AM_INCLUDES =
AM_CFLAGS =
AM_LDFLAGS =

# would be nice to let through user-specified flags, but for some reason these are set also
CXXFLAGS =
CCASFLAGS =
CFLAGS =
LDFLAGS =

##############################################################
# Export platform-specific build environment variables
##############################################################
export @nta_platform_env1@

SUFFIXES =


################################################################
# Python installation paths
# Most python installations put python modules into
# <prefix>/lib/site-packages, but some (e.g. SLES/64-bit)
# put them into <prefix>/lib64/site-packages. The
# standard automake macros reproduce whatever the local
# convention is. But in a self-contained NuPIC release,
# there is a single directory "lib".
# So we override the ${pythondir} to install correctly
# for NuPIC.
# Note that PYTHON_SYS_LIB (defined in configure.ac)
# points to the system installation and does follow
# the local lib/lib64 convention.
################################################################
pythonsubdir = lib/python$(PYTHON_VERSION)/site-packages
pythondir = $(prefix)/$(pythonsubdir)

##############################################################
# Python compile flags
# Flags necessary for Python support.
# NTA_PYEMBEDFLAGS is for linking an executable with embedded interpreter
# NTA_PYMODULEFLAGS is for linking a python module
# Variables ending in _LDFLAGS mess up automake
##############################################################
if NTA_PYTHON_SUPPORT
  NTA_PYEMBEDFLAGS = @nta_platform_pyembed@ -L$(PYTHON_SYS_LIB)

  NTA_PYMODULEFLAGS = -module -avoid-version @nta_platform_pyldflags@ \
                      -L$(externaldir)/lib -L$(PYTHON_SYS_LIB)

  NTA_PYTHON_LIBS =  @nta_platform_python_libs@

  NTA_PYTHON_CXXFLAGS = -DNTA_PYTHON_SUPPORT=$(PYTHON_VERSION) \
    -DNTAPY_INCLUDE="<python$(PYTHON_VERSION)/" \
    -DNTAPY_PACKAGES="\"$(pythonsubdir)\""

  # Minimal functional subset. Assumes Python 2.4. Equivalent to Windows flags.
  # NTA_PYTHON_CXXFLAGS = -DNTA_PYTHON_SUPPORT

  NTA_CXXFLAGS_BASE += $(NTA_PYTHON_CXXFLAGS) \
    -I$(PYTHON_SYS_INCLUDE)

  NTA_CXXFLAGS_BASE += -I$(NUPIC_INSTALL)/lib/python$(PYTHON_VERSION)/site-packages/numpy/core/include

else
  NTA_PYEMBEDFLAGS =
  NTA_PYMODULEFLAGS =
  NTA_PYTHON_LIBS =
endif
##############################################################


##############################################################
# NTA_CXXFLAGS are used everywhere
# NTA_CXXFLAGS_PYTHON_BINDINGS is the same as NTA_CXXFLAGS but without
# warnings=errors and without optimization.
# We compile without optimization because it greatly speeds up
# the build, and performance isn't too important for wrapper
# functions.
##############################################################
NTA_CXXFLAGS = $(NTA_CXXFLAGS_BASE) $(NTA_CXX_OPTFLAGS)

# -falign-functions is necessary to avoid a compiler problem on
# darwin. If you build without -falign-functions, exceptions
# thrown in a pynode result in an abort() instead of propagation
# up the call stack.
NTA_CXXFLAGS_PYTHON_BINDINGS = $(NTA_CXXFLAGS_BASE) $(NTA_PYTHON_BINDINGS_OPTFLAGS) -falign-functions


##############################################################
# Special rules for use with swig.
##############################################################
if NTA_PYTHON_SUPPORT

SUFFIXES += _py.i _py.cpp

PYSWIGOPTS = $(SWIG_PYTHON_OPT) \
-features autodoc=0,directors=0 \
-noproxyimport \
-keyword -modern -modernargs -noproxydel \
-fvirtual -fastunpack -nofastproxy -fastquery \
-outputtuple \
-castmode \
-w511 -w302 -w362 -w312 -w389 \
-DNTA_PLATFORM_@nta_platform@ \
$(NTA_PYTHON_CXXFLAGS) $(NUPIC_VERSION_FLAGS)

PYSWIGINCLUDES = \
-I$(top_srcdir) \
-I$(top_srcdir)/external/@nta_platform@/include \
-I$(NUPIC_INSTALL)/lib/python$(PYTHON_VERSION)/site-packages/numpy/core/include

PYSWIGCOMPILE = $(SWIG) $(PYSWIGOPTS) $(PYSWIGINCLUDES)

##############################################################
## Rule to build a C++ source file from a Python-targeted swig interface file.
## Auto-generates dependencies for the swig interface file.
##
## This rule is modeled on the rules generated by Automake and inserted
## into the Makefile.in of a typical library directory.
## If those change dramatically (due to an upgrade of Automake use of a
## different build system), then these lines must change as well.
## They can be made to perform in one of three ways:
## 1) Fast dependencies (lines 1-3): the meat of depcomp is sprayed directly
##    into the Makefile so we don_t have to run an extra script.
##    Similar in intent to method 2.
## 2) depcomp (lines 4-5,6): Run depcomp over our compile line (on line 6)
##    as swig supports gcc-style (not gcc3-style) dependency flags.
## 3) No dependencies (line 6): Just run our compile line.
##
## This has only been tested with fast dependencies. If you have
## problems with other dependency policies, fix them here.
## If the compile line for generating C++ source from swig needs to
## be changed, change it in the definition of PYSWIGCOMPILE (above).
## If the compile line below must be changed, it must be changed in
## _both_ line 2 and line 6.
##
## To generate rules for other languages, it is ok to duplicate the lines
## below, tweak them as necessary (esp. the dependency extension and
## the compile lines (2 and 6)), and refer those docs back to this comment.
##
## An example use of this in a Makefile.am might be:
## BUILT_SOURCES += foundation_py.cpp
## pkgpython_PYTHON += foundation.py
## _foundation_la_SOURCES = foundation_py.cpp foundation_py.i
## @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/foundation_py.Pswig@am__quote@
##
## ... where foundation_py.i exists and is a swig interface file for
##     binding C++ in Python, and where there are additional entries in the
##     Makefile.am pertaining to the creation of the Python extension module
##     _foundation. See nta/foundation/Makefile.am for a detailed example.
##############################################################
_py.i_py.cpp:
@am__fastdepCXX_TRUE@	export SWIG_LIB=$(SWIG_LIB); \
@am__fastdepCXX_TRUE@	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.cpp$$||'`; \
@am__fastdepCXX_TRUE@	if $(PYSWIGCOMPILE) -MMD -MF "$$depbase.TPswig" -o $@ $<; \
@am__fastdepCXX_TRUE@	then mv -f "$$depbase.TPswig" "$$depbase.Pswig"; else rm -f "$$depbase.TPswig"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) depmode=gcc $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(PYSWIGCOMPILE) -o $@ $<

endif
# NTA_PYTHON_SUPPORT

