# Get hash for last commit
ARCH=`uname`

# Get which build to test
scp data:/Volumes/big/www/jenkins/status/'build_'$ARCH'_done' test_tmpfile
TAG=`sed -n $'$p' test_tmpfile`

# What if TAG is empty
if [ "$TAG" == "" ]; then
echo "No build to test. Quitting"
exit
fi

# Quit if test is done for this TAG
scp data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_done' test_tmpfile
count=$(echo `grep -i $TAG test_tmpfile|wc -l`)
if [ "$count" != 0 ] ; then
echo "Test done for this build. Quitting"
exit
else
echo "Test not done for this build. Continuing ..."
fi

# Quit if test is in progress for this TAG
scp data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_inprogress' test_tmpfile
count=$(echo `grep -i $TAG test_tmpfile|wc -l`)
if [ "$count" != 0 ] ; then
echo "Test in progress for this build. Quitting"
exit
else
echo "Test not in progress for this build. Continuing ..."
fi

# Mark test in progress
#ssh data mkdir -p /Volumes/big/www/jenkins/$TAG
ssh data touch /Volumes/big/www/jenkins/$TAG/'test_'$ARCH'.inprogress'
scp data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_inprogress' test_tmpfile
echo $TAG >> test_tmpfile
scp test_tmpfile data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_inprogress'

# If local, use local build
## If not local, download and extract that build
# if [ $LOCAL_BUILD_TEST -eq 1 ]; then
BUILD=$HOME/Jenkins/Builds/$TAG/nta/eng
if [ -d "$BUILD" ]; then
echo "Using local build ..."
else
scp data:/Volumes/big/www/jenkins/builds/$TAG'_'$ARCH'.tgz $HOME/Jenkins/Builds/
cd $HOME/Jenkins/Builds/
tar -zxf $TAG'_'$ARCH'.tgz
cd $WORKSPACE
fi


# Set paths and environment
rm -f $HOME/config.timestamp
mkdir -p /tmp/$TAG
export PYTHONPATH=$BUILD/lib/python2.6/site-packages:$WORKSPACE/build_system
export NTA=$BUILD
unset NTA_LOG_DIR
unset NTA_CONF_DIR
export NTA_WORK_DIR=/tmp/$TAG
export JAVA_HOME=/usr/lib/jvm/jre-1.6.0-openjdk.x86_64/
source $NTA/tools/nupic-env.sh autotest > source.out 2>&1

# Run tests
#sh test.sh $BUILD $WORKSPACE $ARCH $TAG
cd $WORKSPACE
test=(`python2 $WORKSPACE/../scripts/test.py $BUILD $WORKSPACE $WORKSPACE'/standard.out'`)
result=$?


# Mark tests as done
echo "Marking tests as done"
ssh data touch /Volumes/big/www/jenkins/$TAG/'test_'$ARCH'.done'
ssh data rm /Volumes/big/www/jenkins/$TAG/'test_'$ARCH'.inprogress'

# Add to test_done list
echo "Updating test_done list"
scp data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_done' .
echo $TAG >> 'test_'$ARCH'_done'
scp 'test_'$ARCH'_done' data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_done'

# Remove from test_inprogress list
echo "Removing from test_inprogress list"
scp data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_inprogress' test_tmpfile
touch test_tmpfile2
sed "/$TAG/d" test_tmpfile > test_tmpfile2
scp test_tmpfile2 data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_inprogress'

# Upload log to data
echo "Uploading log data"
scp standard.out data:/Volumes/big/www/jenkins/$TAG/

# If test failed, add to test_fail list
echo "Test result:"
count=$(echo `grep "WARNING FAILED" standard.out|wc -l`)
if [ "$count" != 0 ] ; then
echo "Tests failed. Updating test_fail list"
scp data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_fail' .
echo $TAG >> 'test_'$ARCH'_fail'
scp 'test_'$ARCH'_fail' data:/Volumes/big/www/jenkins/status/'test_'$ARCH'_fail'
fi

# Return failure if test failed
if [ "$count" != 0 ]; then
exit 1
fi
